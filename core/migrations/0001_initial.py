# Generated by Django 5.1.2 on 2024-10-11 11:10

import core.custom_utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import django_resized.forms
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50, verbose_name='Firstname')),
                ('last_name', models.CharField(max_length=50, verbose_name='Lastname')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(default='', max_length=16, validators=[django.core.validators.RegexValidator(message="شماره تلفن باید با فرمت '+989876543210' وارد شود. حداکثر ۱۵ رقم مجاز است.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone')),
                ('address', models.TextField(max_length=1000, null=True, verbose_name='Address')),
                ('national_id', models.CharField(blank=True, max_length=10, null=True, unique=True, validators=[core.custom_utils.is_valid_iran_national_id], verbose_name='National ID')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1, verbose_name='Gender')),
                ('profile_img', django_resized.forms.ResizedImageField(crop=None, default='/static/logo.webp', force_format='WEBP', keep_meta=True, quality=75, scale=None, size=[1920, 1080], upload_to=core.custom_utils.user_directory_path, verbose_name='Profile Picture')),
                ('birthdate', models.DateField(default=django.utils.timezone.now, verbose_name='Birth Date')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('province', models.CharField(max_length=50, verbose_name='Province')),
                ('country', models.CharField(max_length=50, verbose_name='Country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
